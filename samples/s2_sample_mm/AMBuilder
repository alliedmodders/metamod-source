# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python: 
import os

# Here only one sdk should be available to generate only one executable in the end,
# as multi-sdk loading isn't supported out of the box by metamod, and would require specifying the full path in the vdf
# which in the end would ruin the multi-platform (unix, win etc) loading by metamod as it won't be able to append platform specific extension
# so just fall back to the single binary.
# Multi-sdk solutions should be manually loaded with a custom plugin loader (examples being sourcemod, stripper:source)
for sdk_target in MMSPlugin.sdk_targets:
  sdk = sdk_target.sdk
  cxx = sdk_target.cxx
  protoc = sdk_target.protoc

  binary = MMSPlugin.HL2Library(builder, cxx, MMSPlugin.plugin_name, sdk)

  binary.sources += [
    'sample_mm.cpp'
  ]

  binary.sources += [
    os.path.join(sdk['path'], 'tier1', 'convar.cpp'),
    os.path.join(sdk['path'], 'public', 'tier0', 'memoverride.cpp')
  ]

  proto_files = [
    os.path.join(sdk['path'], 'common', 'network_connection.proto'),
  ]

  protoc.includes = [
    os.path.join(sdk['path'], 'thirdparty', 'protobuf-3.21.8', 'src'),
    os.path.join(sdk['path'], 'common'),
  ]

  binary.custom = [builder.tools.Protoc(sources = proto_files, protoc = protoc)]

  nodes = builder.Add(binary)
  MMSPlugin.binaries += [nodes]
