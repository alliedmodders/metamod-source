# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python: 
import os

# Function to add multiple files from one folder
# e.g. in binary.sources adding *addFromFolder to unpack the list.
def addFromFolder(path, extension=".cpp", recursive=False):
	fileSelection = []
	
	for root, dirs, files in os.walk(path):
		for file in files:
			if file.endswith(extension):
				fileSelection.append( os.path.join(root, file) )
		
		if not recursive:
			break # no recursive

	return fileSelection


for sdk_name in MMS.sdks:
  for cxx in MMS.all_targets:
    sdk = MMS.sdks[sdk_name]

    if not cxx.target.arch in sdk.platformSpec[cxx.target.platform]:
      continue

    name = 'metamod.' + sdk.ext
    binary = MMS.HL2Library(builder, cxx, name, sdk)

    binary.sources += [
      'metamod.cpp',
      'metamod_console.cpp',
      'metamod_oslink.cpp',
      'metamod_plugins.cpp',
      'metamod_util.cpp',
      'provider/provider_base.cpp',
      'sourcehook/sourcehook.cpp',
      'sourcehook/sourcehook_impl_chookidman.cpp',
      'sourcehook/sourcehook_impl_chookmaninfo.cpp',
      'sourcehook/sourcehook_impl_cproto.cpp',
      'sourcehook/sourcehook_impl_cvfnptr.cpp',
      'gamedll_bridge.cpp'
    ]

    if sdk_name in ['dota', 'cs2']:
      binary.sources += [
	    'provider/source2/provider_source2.cpp',
		os.path.join(sdk.path, 'tier1', 'convar.cpp'),
		os.path.join(sdk.path, 'public', 'tier0', 'memoverride.cpp')
	  ]
    else:
      binary.sources += [
        'provider/source/provider_source.cpp',
        'provider/source/provider_source_console.cpp',
        'vsp_bridge.cpp'
        ]

    if cxx.target.arch == 'x86':
      binary.sources += ['sourcehook/sourcehook_hookmangen.cpp']
    nodes = builder.Add(binary)
    MMS.binaries += [nodes]
